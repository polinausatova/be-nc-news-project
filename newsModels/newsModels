
const db = require("../db/connection.js");

exports.fetchTopics = () => {
    return db.query(`SELECT * FROM topics`).then((topics) => {
       
        return topics.rows;
    });
}

exports.fetchArticles = () => {

    return db.query(`
    SELECT articles.*, CAST(COUNT (comments.author) AS INT) AS comment_count
    FROM articles LEFT JOIN comments ON comments.article_id = articles.article_id
    GROUP BY articles.article_id
    ORDER BY articles.created_at DESC;
    `).then((articles) => {
    return articles.rows;
    })
}

// The end point should also accept the following queries:
// topic, which filters the articles by the topic value specified in the query. If the query is omitted the endpoint should respond with all articles.
// sort_by, which sorts the articles by any valid column (defaults to date)
// order, which can be set to asc or desc for ascending or descending (defaults to descending)

exports.fetchArticleById = (id) => {

    return db.query(`SELECT * FROM articles WHERE article_id = $1`, [id]).then((articles) => {
        if (articles.rows.length === 0) {
            return Promise.reject("Article Not Found");
        }
        return articles.rows[0];
    });
};

exports.fetchComments = (article_id) => {
    if (typeof article_id*1 === NaN) {
        return next();
    } 
    else 
    return db.query(`
    SELECT * FROM comments 
    WHERE comments.article_id = $1 
    ORDER BY comments.created_at DESC;
    `, [article_id]).then((comments) => {
        if (comments.rows.length === 0) {
            return db.query(`
            SELECT * FROM articles
            WHERE articles.article_id = $1
            `, [article_id]).then((articles) => {
                if (articles.rows.length === 0) {
                    return Promise.reject("Article Not Found");
                }
                return [];
            })
        } 
        return comments.rows;
    });
}

exports.insertComment = (article_id, req_body) => {
    const { username, body } = req_body;
    return db.query(`SELECT * FROM articles WHERE article_id = $1`, [article_id]).then((articles) => {
        if (articles.rows.length === 0) {
            return Promise.reject("Article Not Found");
        } else 
        {
            return db.query(`
            INSERT INTO comments 
            (body, author, article_id) VALUES 
            ($1, $2, $3)
            RETURNING *;`, 
            [body, username, article_id])
            .then((comment) => {
                return comment.rows[0];
            });
        }
    });
}

exports.changeVotes = (id, votes) => {

    return db.query(`SELECT * FROM articles WHERE article_id = $1`, [id]).then((articles) => {
        if (articles.rows.length === 0) {
            return Promise.reject("Article Not Found");
        } else {
            return db.query(`
            UPDATE articles
            SET votes = votes + $1
            WHERE article_id = $2
            RETURNING *;`
            , [ votes, id ])
            .then((articles) => {
                return articles.rows[0];
            })
        }
    });
};

exports.fetchUsers = () => {
    return db.query(`SELECT * FROM users`).then((users) => {
      
        return users.rows;
    });
}